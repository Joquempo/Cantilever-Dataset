"""
Dataset Generation
Topology Optimization of a Cantilever Beam
--------------------------------------------------------------------
Laboratory of Topology Optimization and Multiphysics Analysis
Department of Computational Mechanics
School of Mechanical Engineering
University of Campinas (Brazil)
--------------------------------------------------------------------
author  : Daniel Candeloro Cunha
version : 1.0
date    : May 2022
--------------------------------------------------------------------
To collaborate or report bugs, please look for the author's email
address at https://www.fem.unicamp.br/~ltm/

All codes and documentation are publicly available in the following
github repository: https://github.com/Joquempo/Cantilever-Dataset

If you use this program (or the data generated by it) in your work,
the developer would be grateful if you would cite the indicated
references. They are listed in the "CITEAS" file available in the
github repository.
--------------------------------------------------------------------
Copyright (C) 2022 Daniel Candeloro Cunha

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see https://www.gnu.org/licenses
"""

# cython: boundscheck=False
# cython: wraparound=False
# cython: cdivision=True

cimport cython

cdef void cgs_0_serial(double [:] alpha_r, double [:,::1] dKe, double [:] ug, long long Nx, long long Ny):
    cdef long long N
    cdef long long e
    cdef long long k1
    cdef long long k2
    cdef double sval
    cdef long long nodes[4]
    cdef long long dofs[8]
    cdef double ue[8]
    cdef double fe[8]
    N = Nx*Ny
    for e in range(N):
        nodes[0] = e + e//Ny
        nodes[1] = nodes[0] + 1 + Ny
        nodes[2] = nodes[1] + 1
        nodes[3] = nodes[0] + 1
        for k1 in range(4):
            dofs[2*k1] = 2*nodes[k1]
            dofs[2*k1+1] = dofs[2*k1] + 1
        for k1 in range(8):
            ue[k1] = ug[dofs[k1]]
        sval = 0.0
        for k1 in range(8):
            fe[k1] = 0.0
            for k2 in range(8):
                fe[k1] = fe[k1] + dKe[k1][k2]*ue[k2] 
            sval = sval - ue[k1]*fe[k1]
        alpha_r[e] = sval
    return

cdef void cgs_1J_serial(double [:] alpha_r, long long [:] dens, double [:] data, long long [:] row_ind, long long [:] col_ptr, long long [:] bc_lim, double [:,::1] dKe, double [:] ug, long long Nx, long long Ny):
    cdef long long N
    cdef long long e
    cdef long long k1
    cdef long long k2
    cdef long long c
    cdef long long r
    cdef long long col
    cdef double b0
    cdef double b1
    cdef double sval
    cdef long long nodes[4]
    cdef long long dofs[8]
    cdef long long local_ids[8]
    cdef double ue[8]
    cdef double fe[8]
    cdef double mfe[8]
    cdef double ffe[8]
    cdef double Kbb[8][8]
    N = Nx*Ny
    for e in range(N): 
        col = e // Ny
        nodes[0] = e + col
        nodes[1] = nodes[0] + 1
        nodes[2] = nodes[0] + 1 + Ny
        nodes[3] = nodes[2] + 1
        for k1 in range(4):
            dofs[2*k1] = 2*nodes[k1]
            dofs[2*k1+1] = dofs[2*k1] + 1
        local_ids[0] = 0
        local_ids[1] = 1
        local_ids[2] = 6
        local_ids[3] = 7
        local_ids[4] = 2
        local_ids[5] = 3
        local_ids[6] = 4
        local_ids[7] = 5
        for k1 in range(8):
            ue[local_ids[k1]] = ug[dofs[k1]]
        sval = 0.0
        for k1 in range(8):
            ffe[k1] = 0.0    
            fe[k1] = 0.0
            for k2 in range(8):
                fe[k1] = fe[k1] + dKe[k1][k2]*ue[k2]
            sval = sval - ue[k1]*fe[k1]
        # cantilever constraints
        if col == 0:
            if (e >= bc_lim[0]) and (e <= bc_lim[1]):
                fe[0] = 0.0
                fe[1] = 0.0
            if (e+1 >= bc_lim[0]) and (e+1 <= bc_lim[1]):
                fe[6] = 0.0
                fe[7] = 0.0
        for c in range(8):
            r = c
            for k1 in range(col_ptr[dofs[c]]+c,col_ptr[dofs[c]+1]):
                if row_ind[k1] == dofs[r]:
                    Kbb[local_ids[r]][local_ids[c]] = data[k1]
                    Kbb[local_ids[c]][local_ids[r]] = data[k1]
                    if r == 7:
                        break
                    else:
                        r = r + 1
        b0 = 0.0
        b1 = 0.0
        if dens[e] == 0:
            for k1 in range(8):
                Kbb[k1][k1] = Kbb[k1][k1] + dKe[k1][k1]
                mfe[k1] = fe[k1]/Kbb[k1][k1]
                for k2 in range(k1+1,8):
                    Kbb[k1][k2] = Kbb[k1][k2] + dKe[k1][k2]
                    Kbb[k2][k1] = Kbb[k1][k2]
                b0 = b0 + fe[k1]*mfe[k1]
            for k1 in range(8):
                ffe[k1] = ffe[k1] + Kbb[k1][k1]*mfe[k1]
                for k2 in range(k1+1,8):
                    ffe[k1] = ffe[k1] + Kbb[k1][k2]*mfe[k2]
                    ffe[k2] = ffe[k2] + Kbb[k2][k1]*mfe[k1]
                b1 = b1 + mfe[k1]*ffe[k1]
            sval = sval + (b0*b0)/b1
        else:
            for k1 in range(8):
                Kbb[k1][k1] = Kbb[k1][k1] - dKe[k1][k1]
                mfe[k1] = fe[k1]/Kbb[k1][k1]
                for k2 in range(k1+1,8):
                    Kbb[k1][k2] = Kbb[k1][k2] - dKe[k1][k2]
                    Kbb[k2][k1] = Kbb[k1][k2]
                b0 = b0 + fe[k1]*mfe[k1]
            for k1 in range(8):
                ffe[k1] = ffe[k1] + Kbb[k1][k1]*mfe[k1]
                for k2 in range(k1+1,8):
                    ffe[k1] = ffe[k1] + Kbb[k1][k2]*mfe[k2]
                    ffe[k2] = ffe[k2] + Kbb[k2][k1]*mfe[k1]
                b1 = b1 + mfe[k1]*ffe[k1]
            sval = sval - (b0*b0)/b1
        alpha_r[e] = sval
    return

cdef void cgs_2J_serial(double [:] alpha_r, long long [:] dens, double [:] data, long long [:] row_ind, long long [:] col_ptr, long long [:] bc_lim, double [:,::1] dKe, double [:] ug, long long Nx, long long Ny):
    cdef long long N
    cdef long long e
    cdef long long k1
    cdef long long k2
    cdef long long c
    cdef long long r
    cdef long long row
    cdef long long col
    cdef double b0
    cdef double b1
    cdef double b2
    cdef double b3
    cdef double sval
    cdef long long nodes[16]
    cdef long long dofs[32]
    cdef long long local_ids[32]
    cdef double ue[8]
    cdef double fe[8]
    cdef double mfe[8]
    cdef double ffe[32]
    cdef double mffe[32]
    cdef double fffe[32]
    cdef double Kbb[32][32]
    N = Nx*Ny
    for e in range(N):
        row = e % Ny
        col = e // Ny
        nodes[5]  = e + col
        nodes[0]  = nodes[5] - 2 - Ny
        nodes[1]  = nodes[5] - 1 - Ny
        nodes[2]  = nodes[5] + 0 - Ny
        nodes[3]  = nodes[5] + 1 - Ny
        nodes[4]  = nodes[5] - 1
        nodes[6]  = nodes[5] + 1
        nodes[7]  = nodes[5] + 2
        nodes[8]  = nodes[5] + 0 + Ny
        nodes[9]  = nodes[5] + 1 + Ny
        nodes[10] = nodes[5] + 2 + Ny
        nodes[11] = nodes[5] + 3 + Ny
        nodes[12] = nodes[5] + 1 + Ny*2
        nodes[13] = nodes[5] + 2 + Ny*2
        nodes[14] = nodes[5] + 3 + Ny*2
        nodes[15] = nodes[5] + 4 + Ny*2
        for k1 in range(16):
            dofs[2*k1] = 2*nodes[k1]
            dofs[2*k1+1] = dofs[2*k1] + 1
        if row == 0:
            for k1 in range(4):
                dofs[8*k1]   = -1
                dofs[8*k1+1] = -1
        elif row == Ny-1:
            for k1 in range(4):
                dofs[8*k1+6] = -1
                dofs[8*k1+7] = -1
        if col == 0:
            for k1 in range(4):
                dofs[2*k1]   = -1
                dofs[2*k1+1] = -1
        elif col == Nx-1:
            for k1 in range(4):
                dofs[2*k1+24] = -1
                dofs[2*k1+25] = -1
        for k1 in range(10):
            local_ids[k1] = k1+8
        local_ids[10] = 0
        local_ids[11] = 1
        local_ids[12] = 6
        local_ids[13] = 7
        for k1 in range(14,18):
            local_ids[k1] = k1+4
        local_ids[18] = 2
        local_ids[19] = 3
        local_ids[20] = 4
        local_ids[21] = 5
        for k1 in range(22,32):
            local_ids[k1] = k1
        for k1 in range(10,14):
            ue[local_ids[k1]] = ug[dofs[k1]]
            ue[local_ids[k1+8]] = ug[dofs[k1+8]]
        sval = 0.0
        for k1 in range(8):
            fe[k1] = 0.0
            for k2 in range(8):
                fe[k1] = fe[k1] + dKe[k1][k2]*ue[k2]
            sval = sval - ue[k1]*fe[k1]
        # cantilever constraints
        if col == 0:
            if (e >= bc_lim[0]) and (e <= bc_lim[1]):
                fe[0] = 0.0
                fe[1] = 0.0
            if (e+1 >= bc_lim[0]) and (e+1 <= bc_lim[1]):
                fe[6] = 0.0
                fe[7] = 0.0
        for c in range(32):
            Kbb[c][c] = 0.0
            for r in range(c+1,32):
                Kbb[r][c] = 0.0
                Kbb[c][r] = 0.0
        for c in range(32):
            if dofs[c] != -1:
                for r in range(32):
                    for k1 in range(col_ptr[dofs[c]],col_ptr[dofs[c]+1]):    
                        if row_ind[k1] == dofs[r]:
                            Kbb[local_ids[r]][local_ids[c]] = data[k1]
                            Kbb[local_ids[c]][local_ids[r]] = data[k1]
        b0 = 0.0
        b1 = 0.0
        b2 = 0.0
        b3 = 0.0
        if dens[e] == 0:
            for k1 in range(8):
                Kbb[k1][k1] = Kbb[k1][k1] + dKe[k1][k1]
                mfe[k1] = fe[k1]/Kbb[k1][k1]
                for k2 in range(k1+1,8):
                    Kbb[k1][k2] = Kbb[k1][k2] + dKe[k1][k2]
                    Kbb[k2][k1] = Kbb[k1][k2]
                b0 = b0 + fe[k1]*mfe[k1]
            for k1 in range(32):
                ffe[k1] = 0.0
                for k2 in range(8):
                    ffe[k1] = ffe[k1] + Kbb[k1][k2]*mfe[k2]
            for k1 in range(8):
                b1 = b1 + mfe[k1]*ffe[k1]
            # cantilever constraints
            if col == 0:
                if (row-1 >= bc_lim[0]) and (row-1 <= bc_lim[1]):
                    ffe[16] = 0.0
                    ffe[17] = 0.0
                if (row >= bc_lim[0]) and (row <= bc_lim[1]):
                    ffe[0] = 0.0
                    ffe[1] = 0.0
                if (row+1 >= bc_lim[0]) and (row+1 <= bc_lim[1]):
                    ffe[6] = 0.0
                    ffe[7] = 0.0
                if (row+2 >= bc_lim[0]) and (row+2 <= bc_lim[1]):
                    ffe[18] = 0.0
                    ffe[19] = 0.0
            elif col == 1:
                if (row-1 >= bc_lim[0]) and (row-1 <= bc_lim[1]):
                    ffe[8] = 0.0
                    ffe[9] = 0.0
                if (row >= bc_lim[0]) and (row <= bc_lim[1]):
                    ffe[10] = 0.0
                    ffe[11] = 0.0
                if (row+1 >= bc_lim[0]) and (row+1 <= bc_lim[1]):
                    ffe[12] = 0.0
                    ffe[13] = 0.0
                if (row+2 >= bc_lim[0]) and (row+2 <= bc_lim[1]):
                    ffe[14] = 0.0
                    ffe[15] = 0.0
            for r in range(32):
                k1 = local_ids[r]
                if dofs[r] != -1:
                    mffe[k1] = ffe[k1]/Kbb[k1][k1]
                    b2 = b2 + ffe[k1]*mffe[k1]
                else:
                    mffe[k1] = 0.0                    
            for k1 in range(32):
                fffe[k1] = 0.0
                for k2 in range(32):
                    fffe[k1] = fffe[k1] + Kbb[k1][k2]*mffe[k2]
                b3 = b3 + mffe[k1]*fffe[k1]
            sval = sval + (b0*b0*b3 - 2*b0*b1*b2 + b1*b1*b1)/(b1*b3-b2*b2)
        else:
            for k1 in range(8):
                Kbb[k1][k1] = Kbb[k1][k1] - dKe[k1][k1]
                mfe[k1] = fe[k1]/Kbb[k1][k1]
                for k2 in range(k1+1,8):
                    Kbb[k1][k2] = Kbb[k1][k2] - dKe[k1][k2]
                    Kbb[k2][k1] = Kbb[k1][k2]
                b0 = b0 + fe[k1]*mfe[k1]
            for k1 in range(32):
                ffe[k1] = 0.0
                for k2 in range(8):
                    ffe[k1] = ffe[k1] + Kbb[k1][k2]*mfe[k2]
            for k1 in range(8):
                b1 = b1 + mfe[k1]*ffe[k1]
            # cantilever constraints
            if col == 0:
                if (row-1 >= bc_lim[0]) and (row-1 <= bc_lim[1]):
                    ffe[16] = 0.0
                    ffe[17] = 0.0
                if (row >= bc_lim[0]) and (row <= bc_lim[1]):
                    ffe[0] = 0.0
                    ffe[1] = 0.0
                if (row+1 >= bc_lim[0]) and (row+1 <= bc_lim[1]):
                    ffe[6] = 0.0
                    ffe[7] = 0.0
                if (row+2 >= bc_lim[0]) and (row+2 <= bc_lim[1]):
                    ffe[18] = 0.0
                    ffe[19] = 0.0
            elif col == 1:
                if (row-1 >= bc_lim[0]) and (row-1 <= bc_lim[1]):
                    ffe[8] = 0.0
                    ffe[9] = 0.0
                if (row >= bc_lim[0]) and (row <= bc_lim[1]):
                    ffe[10] = 0.0
                    ffe[11] = 0.0
                if (row+1 >= bc_lim[0]) and (row+1 <= bc_lim[1]):
                    ffe[12] = 0.0
                    ffe[13] = 0.0
                if (row+2 >= bc_lim[0]) and (row+2 <= bc_lim[1]):
                    ffe[14] = 0.0
                    ffe[15] = 0.0
            for r in range(32):
                k1 = local_ids[r]
                if dofs[r] != -1:
                    mffe[k1] = ffe[k1]/Kbb[k1][k1]
                    b2 = b2 + ffe[k1]*mffe[k1]
                else:
                    mffe[k1] = 0.0
            for k1 in range(32):
                fffe[k1] = 0.0
                for k2 in range(32):
                    fffe[k1] = fffe[k1] + Kbb[k1][k2]*mffe[k2]
                b3 = b3 + mffe[k1]*fffe[k1]
            sval = sval - (b0*b0*b3 - 2*b0*b1*b2 + b1*b1*b1)/(b1*b3-b2*b2)
        alpha_r[e] = sval
    return

def str_cgs(alpha_r, x, Kg_csc, bc_lim, dKe, ug, Nx, Ny, steps=0):
    if steps == 0:
        cgs_0_serial(alpha_r, dKe, ug, Nx, Ny)
    else: 
        dens = x.astype("int64")
        data = Kg_csc.data
        row_ind = Kg_csc.indices.astype("int64")
        col_ptr = Kg_csc.indptr.astype("int64")
        if steps == 1:
            cgs_1J_serial(alpha_r, dens, data, row_ind, col_ptr, bc_lim, dKe, ug, Nx, Ny)
        else:
            cgs_2J_serial(alpha_r, dens, data, row_ind, col_ptr, bc_lim, dKe, ug, Nx, Ny)
    return
