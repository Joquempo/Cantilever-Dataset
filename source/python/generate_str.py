"""
Dataset Generation
Topology Optimization of a Cantilever Beam
--------------------------------------------------------------------
Laboratory of Topology Optimization and Multiphysics Analysis
Department of Computational Mechanics
School of Mechanical Engineering
University of Campinas (Brazil)
--------------------------------------------------------------------
author  : Daniel Candeloro Cunha
version : 1.0
date    : May 2022
--------------------------------------------------------------------
To collaborate or report bugs, please look for the author's email
address at https://www.fem.unicamp.br/~ltm/

All codes and documentation are publicly available in the following
github repository: https://github.com/Joquempo/Cantilever-Dataset

If you use this program (or the data generated by it) in your work,
the developer would be grateful if you would cite the indicated
references. They are listed in the "CITEAS" file available in the
github repository.
--------------------------------------------------------------------
Copyright (C) 2022 Daniel Candeloro Cunha

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see https://www.gnu.org/licenses
"""

#%% Imports
import os, sys, shutil

conclude_BESO = True  # generate BESO dataset
conclude_SIMP = True  # generate SIMP dataset
noptf         = 16    # number of optimizations stored in the same file

#%% Dataset Verification

# BESO
if conclude_BESO:
    if not os.path.exists('./BESO/output'):
        print('no output directory for BESO')
        sys.exit()
    runs = sorted(os.listdir('./BESO/output'))
    if len(runs) == 0:
        print('no runs for BESO')
        sys.exit()
    total_BESO = 0
    r2 = -1
    for k in range(len(runs)):
        run_dir = './BESO/output/' + runs[k] + '/'
        r1 = int(runs[k][4:10])
        if r1 <= r2:
            print('redundant runs in BESO : ' + runs[k])
            sys.exit()
        r2 = int(runs[k][11:])
        rnum = r2 - r1 + 1
        files = sorted(os.listdir(run_dir))
        if files[-1] == 'logs':
            files = files[:-1]
        else:
            print('missing logs directory in BESO : ' + runs[k])
            sys.exit()
        if rnum % noptf != 0:
            print('number of cases is not a multiple of noptf in BESO : ' + runs[k])
            sys.exit()
        if noptf*len(files) != rnum:
            print('incoherent number of files in BESO : ' + runs[k])
            sys.exit()
        total_BESO += rnum
        for kk in range(len(files)):
            file_dir = run_dir + files[kk]
            if len(os.listdir(file_dir)) != 15:
                print('wrong number of files in BESO : ' + runs[k] + '/' + files[kk])
                sys.exit()
    if total_BESO % noptf != 0:
        print('something is wrong...')
        sys.exit()
    total_BESO = total_BESO // noptf
    print('valid BESO dataset!')
    print('{:04d} / {:04d} files in the BESO dataset ({:5.1f} %)\n'.format(
        total_BESO,148240//noptf,total_BESO*noptf*100/148240))

# SIMP
if conclude_SIMP:
    if not os.path.exists('./SIMP/output'):
        print('no output directory for SIMP')
        sys.exit()
    runs = sorted(os.listdir('./SIMP/output'))
    if len(runs) == 0:
        print('no runs for SIMP')
        sys.exit()
    total_SIMP = 0
    r2 = -1
    for k in range(len(runs)):
        run_dir = './SIMP/output/' + runs[k] + '/'
        r1 = int(runs[k][4:10])
        if r1 <= r2:
            print('redundant runs in SIMP : ' + runs[k])
            sys.exit()
        r2 = int(runs[k][11:])
        rnum = r2 - r1 + 1
        files = sorted(os.listdir(run_dir))
        if files[-1] == 'logs':
            files = files[:-1]
        else:
            print('missing logs directory in SIMP : ' + runs[k])
            sys.exit()
        if rnum % noptf != 0:
            print('number of cases is not a multiple of noptf in SIMP : ' + runs[k])
            sys.exit()
        if noptf*len(files) != rnum:
            print('incoherent number of files in SIMP : ' + runs[k])
            sys.exit()
        total_SIMP += rnum
        for kk in range(len(files)):
            file_dir = run_dir + files[kk]
            if len(os.listdir(file_dir)) != 15:
                print('wrong number of files in SIMP : ' + runs[k] + '/' + files[kk])
                sys.exit()
    if total_SIMP % noptf != 0:
        print('something is wrong...')
        sys.exit()
    total_SIMP = total_SIMP // noptf
    print('valid SIMP dataset!')
    print("{:04d} / {:04d} files in the SIMP dataset ({:5.1f} %)\n".format(
        total_SIMP,148240//noptf,total_SIMP*noptf*100/148240))

# check directories
if not os.path.exists('../../dataset'):
    os.mkdir('../../dataset')
if conclude_BESO:
    if not os.path.exists('../../dataset/BESO'):
        os.mkdir('../../dataset/BESO')
    else:
        if len(os.listdir('../../dataset/BESO')) > 0:
            print('a BESO dataset has already been generated, rename its directory before generating a new one')
            sys.exit()
if conclude_SIMP:
    if not os.path.exists('../../dataset/SIMP'):
        os.mkdir('../../dataset/SIMP')
    else:
        if len(os.listdir('../../dataset/SIMP')) > 0:
            print('a SIMP dataset has already been generated, rename its directory before generating a new one')
            sys.exit()

#%% Dataset Generation

# BESO
if conclude_BESO:
    global_id = 0
    runs = sorted(os.listdir('./BESO/output'))
    for k in range(len(runs)):
        run_dir = './BESO/output/' + runs[k] + '/'
        files = sorted(os.listdir(run_dir))
        files = files[:-1]
        for kk in range(len(files)):
            if global_id % 100 == 0:
                print(': {:04d} / {:04d} : files have been moved to the BESO dataset ({:5.1f} %)'.format(
                    global_id,total_BESO,global_id*100/total_BESO))
            file_dir = run_dir + files[kk] + '/'
            destination = '../../dataset/BESO/f{:04d}'.format(global_id)
            os.mkdir(destination)
            for file in os.listdir(file_dir):
                source = file_dir + file
                shutil.move(source, destination)
            global_id += 1
    print(': {:04d} / {:04d} : files have been moved to the BESO dataset ({:5.1f} %)'.format(
        global_id,total_BESO,global_id*100/total_BESO))
    print('[ BESO dataset generated ]\n')

# SIMP
if conclude_SIMP:
    global_id = 0
    runs = sorted(os.listdir('./SIMP/output'))
    for k in range(len(runs)):
        run_dir = './SIMP/output/' + runs[k] + '/'
        files = sorted(os.listdir(run_dir))
        files = files[:-1]
        for kk in range(len(files)):
            if global_id % 100 == 0:
                print(': {:04d} / {:04d} : files have been moved to the SIMP dataset ({:5.1f} %)'.format(
                    global_id,total_SIMP,global_id*100/total_SIMP))
            file_dir = run_dir + files[kk] + '/'
            destination = '../../dataset/SIMP/f{:04d}'.format(global_id)
            os.mkdir(destination)
            for file in os.listdir(file_dir):
                source = file_dir + file
                shutil.move(source, destination)
            global_id += 1
    print(': {:04d} / {:04d} : files have been moved to the SIMP dataset ({:5.1f} %)'.format(
        global_id,total_SIMP,global_id*100/total_SIMP))
    print('[ SIMP dataset generated ]')
