"""
Dataset Generation
Topology Optimization of a Cantilever Beam
--------------------------------------------------------------------
Laboratory of Topology Optimization and Multiphysics Analysis
Department of Computational Mechanics
School of Mechanical Engineering
University of Campinas (Brazil)
--------------------------------------------------------------------
author  : Daniel Candeloro Cunha
version : 1.0
date    : May 2022
--------------------------------------------------------------------
To collaborate or report bugs, please look for the author's email
address at https://www.fem.unicamp.br/~ltm/

All codes and documentation are publicly available in the following
github repository: https://github.com/Joquempo/Cantilever-Dataset

If you use this program (or the data generated by it) in your work,
the developer would be grateful if you would cite the indicated
references. They are listed in the "CITEAS" file available in the
github repository.
--------------------------------------------------------------------
Copyright (C) 2022 Daniel Candeloro Cunha

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see https://www.gnu.org/licenses
"""

import os, pickle
import numpy as np

# check directories
if not os.path.exists('./input'):
    os.mkdir('./input')

Ny = 32        # number of elements in y-axis
Ly = 1.0       # cantilever height
esize = Ly/Ny  # element size

bc_pos_list_unique = 0.5*(esize*(np.arange(2*Ny-1)+1) - Ly)
bc_num = (Ny*(Ny+1))//2
bc_pos_list = np.zeros(bc_num)
bc_rad_list = np.zeros(bc_num)
c0 = 0
for k in range(Ny):
    c1 = c0 + k//2 + 1
    bc_pos_list[c0:c1] = bc_pos_list_unique[k]
    bc_rad_list[c0:c1] = np.arange(k//2+1) + 1
    if c0 == 0:
        bc_pos_list[-c1:] = bc_pos_list_unique[-1-k]
        bc_rad_list[-c1:] = np.arange(k//2+1) + 1
    else:
        bc_pos_list[-c1:-c0] = bc_pos_list_unique[-1-k]
        bc_rad_list[-c1:-c0] = np.arange(k//2+1) + 1
    c0 = c1
bc_rad_list = esize*bc_rad_list

ld_pos_list_unique = 0.5*(esize*(np.arange(2*Ny+1)) - Ly)
ld_num = ((Ny+1)*(Ny+2))//2
ld_pos_list = np.zeros(ld_num)
ld_rad_list = np.zeros(ld_num)
c0 = 0
for k in range(Ny+1):
    c1 = c0 + k//2 + 1
    ld_pos_list[c0:c1] = ld_pos_list_unique[k]
    ld_rad_list[c0:c1] = np.arange(k//2+1) + k%2
    if c0 == 0:
        ld_pos_list[-c1:] = ld_pos_list_unique[-1-k]
        ld_rad_list[-c1:] = np.arange(k//2+1) + k%2
    else:
        ld_pos_list[-c1:-c0] = ld_pos_list_unique[-1-k]
        ld_rad_list[-c1:-c0] = np.arange(k//2+1)  + k%2
    c0 = c1
ld_rad_list = esize*ld_rad_list

print('generating input files')
total_num = bc_num*ld_num
fid = 0
for kbc in range(bc_num):
    print(': {:06d} / {:06d} :'.format(kbc*ld_num+1,total_num))
    for kld in range(ld_num):
        input_num = kbc*ld_num + kld
        if bc_pos_list[kbc] > 0.1*esize:
            pass
        else:
            if (bc_pos_list[kbc] > -0.1*esize) and (ld_pos_list[kld] > 0.1*esize):
                pass                    
            else:
                Ny_uint32 = np.uint32(Ny)              # number of elements in y-axis
                bc_pos = np.float32(bc_pos_list[kbc])  # center of the restricted area
                bc_rad = np.float32(bc_rad_list[kbc])  # half-length (radius) of the restricted area
                ld_pos = np.float32(ld_pos_list[kld])  # center of the loaded area
                ld_rad = np.float32(ld_rad_list[kld])  # half-length (radius) of the loaded area
                finp = open('./input/inp_{:06d}.pckl'.format(fid),'wb')
                pickle.dump([Ny_uint32,bc_pos,bc_rad,ld_pos,ld_rad],finp)
                finp.close()
                fid = fid + 1
print(': {:06d} / {:06d} :'.format(input_num+1,total_num))
print('[ {:d} input files generated ]'.format(fid))
print('done!')