"""
Dataset Generation
Topology Optimization of a Cantilever Beam
--------------------------------------------------------------------
Laboratory of Topology Optimization and Multiphysics Analysis
Department of Computational Mechanics
School of Mechanical Engineering
University of Campinas (Brazil)
--------------------------------------------------------------------
author  : Daniel Candeloro Cunha
version : 1.0
date    : May 2022
--------------------------------------------------------------------
To collaborate or report bugs, please look for the author's email
address at https://www.fem.unicamp.br/~ltm/

All codes and documentation are publicly available in the following
github repository: https://github.com/Joquempo/Cantilever-Dataset

If you use this program (or the data generated by it) in your work,
the developer would be grateful if you would cite the indicated
references. They are listed in the "CITEAS" file available in the
github repository.
--------------------------------------------------------------------
Copyright (C) 2022 Daniel Candeloro Cunha

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see https://www.gnu.org/licenses
"""

import sys
import numpy as np
from scipy.sparse import coo_matrix
import nlopt

sys.path.append('../../cython/')
from structural_ssens import str_ssens
from structural_filter import str_filter

def solve_mma(dens, pval, epsk, row, col, Nx, Ny, G, Kevec, dKe, freeDofs, fr, rmax, esize,
              lists, ptr, factor, meval=0, inner_meval=0, verbose=0):
    N = Nx*Ny
    ug = np.zeros(G)
    alpha_r = np.zeros(N)
    alpha_f = np.zeros(N)
    last_x = np.zeros(N)
    last_h = np.zeros(1)
    ptr2inp_list = lists[0]
    top_p1_list  = lists[1]
    dis_list     = lists[2]
    sen_p1_list  = lists[3]
    obj_list     = lists[4]
    gra_p1_list  = lists[5]
    vol_p1_list  = lists[6]   
    gra_list     = []
    
    def compliance(x, grad):
        # compute compliance
        pen = epsk + (1.0-epsk)*(x**pval)
        pen = pen.repeat(64)
        data = pen*np.tile(Kevec,N)
        Kg_coo = coo_matrix((data,(row,col)),shape=(G,G))
        Kg_csc = Kg_coo.tocsc()
        Kr = Kg_csc[freeDofs,:][:,freeDofs]
        factor.cholesky_inplace(Kr)
        ug[freeDofs] = factor(fr)
        hval = np.dot(ug[freeDofs],fr)
        
        # store data
        obj_list.append(hval)
        gra_list.append(4*np.mean(x*(1.0-x)))
        x_p1 = x**pval
        gra_p1_list.append(4*np.mean(x_p1*(1.0-x_p1)))
        vol_p1_list.append(sum(x_p1)/N)
        top_p1_list.append(x_p1.copy())
        ptr2inp_list.append(ptr)
        dis_list.append(ug.copy())
        str_ssens(alpha_r, x_p1, dKe, ug, 1.0, Nx, Ny)
        sen_p1_list.append(alpha_r.copy())
        
        # sensitivity analysis
        if grad.size > 0:
            str_ssens(alpha_r, x.copy(), dKe, ug, pval, Nx, Ny)
            str_filter(alpha_r, alpha_f, rmax, esize, Nx, Ny)
            grad[:] = alpha_f
        
        # early convergence
        if (pval > 5.0) and (len(gra_list) >= 10):
            last_x[:] = x
            last_h[0] = hval
            obj_var = (max(obj_list[-10:])-min(obj_list[-10:]))/min(obj_list[-10:])
            gray_var = max(gra_list[-10:])-min(gra_list[-10:])
            if obj_var < 0.001 and gray_var < 0.001:
                raise Exception('early convergence')
        return hval
    
    def volume_const(x, grad):
        if grad.size > 0:
            grad[:] = 1.0
        return sum(x)-0.5*N
    
    opt = nlopt.opt(nlopt.LD_MMA, N)
    opt.set_lower_bounds(np.zeros(N))
    opt.set_upper_bounds(np.ones(N))
    opt.set_min_objective(compliance)
    opt.add_inequality_constraint(volume_const,1e-6*N)
    
    opt.set_xtol_abs(1e-2)
    opt.set_maxeval(meval)
    opt.set_param('inner_maxeval', inner_meval)
    opt.set_param('verbosity', verbose)
    
    try:
        xopt = opt.optimize(dens)
        hopt = opt.last_optimum_value()
    except:
        xopt = last_x
        hopt = last_h[0]
    return xopt, hopt
